Nathan Welch
Algorithms Project 2

/* ------- Definitions ------- //
  kEdges = edges one level under S and above D
  G_i is the flow network -> can be passed in instead of having to be calculated in each function.
  S and D are the source and destination nodes. The connections to/from these nodes can not be deleted
*/

main() {
  parse data from file into a LIST of stuffs //http://www.topology-zoo.org/files/Kdl.gml
    -> this makes our Network(graph) G

  add in S and D
  make K connections
  take data from G and run it through pathFinder algoritm //http://www.geeksforgeeks.org/find-paths-given-source-destination/
    -> this gives us Network G_i

  staticAttackStrategy(G_i);

  reactiveAttackStrategy(G_i);

  randomAttackStrategy(G_i);

  return 0;
}
staticAttackStrategy(Network G_i) {  //assuming we are to recalculate the flow at each iteration
  while flow to D OR flow from S is not zero {
    find edge with most flow through it and delete that edge
    if found edge is NOT a kEdge {
      delete all paths associated with deleted edge from list of paths
      recalculate flow through paths
    }
  }
}

staticAttackStrategy(Network G_i) {  //assuming we are NOT to recalculate the flow at each iteration
  rel_S = relevant edges from S //if there is a kEdge pointing to another kEdge, the first is irrelevant
  rel_D = relevant edges from D
  if(rel_D > rel_S) {
    for(each edge in rel_S)
      delete rel_S edge that has the highest flow
  }
  else {
    for(each edge in rel_D)
      delete rel_D edge that has the highest flow
  }

  OR

  while(flow not zero) {
    find path (to D or from S) that will take out the most flow
    //taking out from one side could knock out multiple edges from the other
    remove that path
  }
}

//attack happens then recalculate flow
reactiveAttackStrategy(Network G_i) {
  run DFS code to find paths
  maxFlow = run Ford_Fulkerson(G, tempCounter) to find maxFlow
    pass tempCounter<int>(remembers edge ID) variable into FFA that keeps track of the edge that has the highest flow
    if multiple of same flow, just remembers first
  while(maxFlow != 0) {
    attack link that will reduce the maxFlow the most
      this is the edge that after running FFA has the most flow running though it
      maxFlow = run Ford_Fulkerson(G, tempCounter) again
  }
}

//assuming flow is recalculated after each attack
randomAttackStrategy(Network G_i) {
  while(flow) {
    pick random edge
    delete edge picked
    recalculate flow (run FFA)
  }
}

Graphs in the final report to be made
1) flow over time
  Line graph
  x-axis -> time
   y-axis -> flow @ time

  This shoud be as steep as possible

2) Time at which 50% original flow is disrupted
  Histogram, 3 bars
  x-axis -> strategy
  y-axis -> rounds till @ 50%
  want a lower number

3) Impact of K
  run the whole thing with K(1->30) and compare how K effects the number of rounds it takes to get to zero
  x-axis -> value of K
  y-axis -> rounds needed to get flow to zero
  want a lower number















//just here cause I like spaces at the end...
